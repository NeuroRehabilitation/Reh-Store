"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const customFS = Object.assign(Object.assign({}, fs_1.default), { getDirTree(locationPath) {
        return __awaiter(this, void 0, void 0, function* () {
            let dirTree = [];
            for (const content of fs_1.default.readdirSync(locationPath)) {
                let contentStat = fs_1.default.statSync(path_1.default.join(locationPath, content));
                dirTree.push(Object.assign({ name: content, size: contentStat.size, mtime: +new Date(contentStat.mtime), isFile: contentStat.isFile(), isDir: contentStat.isDirectory() }, (contentStat.isDirectory() && {
                    content: yield customFS.getDirTree(path_1.default.join(locationPath, content))
                })));
            }
            return dirTree;
        });
    } });
exports.default = customFS;
