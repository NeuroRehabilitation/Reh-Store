import fs from 'fs';
import path from 'path';

export interface getDirTreeProps {
    name: string;
    size: number;
    mtime: number;
    isFile: boolean;
    isDir: boolean;
    content?: getDirTreeProps[]
}

const customFS = {
    ...fs,
    async getDirTree(locationPath: string): Promise<getDirTreeProps[]> {
        let dirTree: Array<getDirTreeProps> = [];
        for (const content of fs.readdirSync(locationPath)) {
            let contentStat = fs.statSync(path.join(locationPath, content));
            dirTree.push({
                name: content,
                size: contentStat.size,
                mtime: +new Date(contentStat.mtime),
                isFile: contentStat.isFile(),
                isDir: contentStat.isDirectory(),
                ...(contentStat.isDirectory() && {
                    content: await customFS.getDirTree(path.join(locationPath, content))
                })
            });
        }

        return dirTree;
    }
};

export default customFS;